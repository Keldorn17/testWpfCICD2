name: "Deploy Todo App"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_PATH: TODO.csproj

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }} -r win-x64
  
      - name: Build the application
        run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore
  
      - name: Publish the executable
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true --no-build -o publish_output

      - name: Upload artifact (Executable)
        uses: actions/upload-artifact@v4
        with:
          name: todo-app-executable
          path: publish_output/*.exe

  tag-and-release:
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '<Version>' ${{ env.PROJECT_PATH }} | sed -E 's/.*<Version>(.*)<\/Version>.*/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Calculate new version
        id: bump_version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update project version
        run: |
          sed -i "s/<Version>.*<\/Version>/<Version>$NEW_VERSION<\/Version>/" ${{ env.PROJECT_PATH }}
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add ${{ env.PROJECT_PATH }}
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Create tag
        run: |
          TAG_NAME="todo/v$NEW_VERSION"
          echo "Creating tag: $TAG_NAME"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: todo-app-executable
          path: publish_output

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          files: publish_output/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}